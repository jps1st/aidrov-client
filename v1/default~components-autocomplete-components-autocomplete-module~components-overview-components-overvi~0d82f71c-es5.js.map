{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ctx_r0","id","_classList","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MatAutocomplete","_changeDetectorRef","_elementRef","defaults","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_autoActiveFirstOption","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","nativeElement","length","_setVisibilityClasses","markForCheck","event","classList","value","split","reduce","className","trim","ɵfac","MatAutocomplete_Factory","t","ɵcmp","type","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","_t","optionGroups","viewQuery","MatAutocomplete_Query","template","first","hostAttrs","inputs","disableRipple","panelWidth","outputs","exportAs","features","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","directives","styles","encapsulation","changeDetection","ctorParameters","undefined","decorators","args","propDecorators","descendants","selector","None","OnPush","host","providers","MatAutocompleteOrigin","elementRef","MatAutocompleteOrigin_Factory","ɵdir","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","asObservable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","activeItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","activeItemIndex","labelCount","_setScrollTop","newScrollPosition","_getScrollTop","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","overlayRef","_portal","create","_getOverlayConfig","keydownEvents","altKey","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","panelClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","_a","defaultView","tabOut","_getOutsideClickStream","detachments","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","_handleFocus","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","_handleInput","MatAutocompleteTrigger_keydown_HostBindingHandler","_handleKeydown","autocompleteDisabled","toString","MatAutocompleteModule","ɵmod","ɵinj","MatAutocompleteModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~components-autocomplete-components-autocomplete-module~components-overview-components-overvi~0d82f71c-es5.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, ContentChildren, Input, Output, Directive, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/cdk/overlay';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/cdk/scrolling';\nimport * as ɵngcc5 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\nclass MatAutocomplete extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = value.split(' ').reduce((classList, className) => {\n                classList[className.trim()] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList['mat-autocomplete-visible'] = this.showPanel;\n        classList['mat-autocomplete-hidden'] = !this.showPanel;\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return new (t || MatAutocomplete)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS)); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatAutocomplete_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(TemplateRef, true);\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\", displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 2, \"ng-template\");\n    } }, directives: [ɵngcc1.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\nMatAutocomplete.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template>\\n  <div class=\\\"mat-autocomplete-panel\\\" role=\\\"listbox\\\" [id]=\\\"id\\\" [ngClass]=\\\"_classList\\\" #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return new (t || MatAutocompleteOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"] });\nMatAutocompleteOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/** The height of each autocomplete option. */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/** The total height of the autocomplete panel. */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nclass MatAutocompleteTrigger {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption();\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    _scrollToOption() {\n        const index = this.autocomplete._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(index, this.autocomplete.options, this.autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.autocomplete._setScrollTop(0);\n        }\n        else {\n            const newScrollPosition = _getOptionScrollPosition(index + labelCount, AUTOCOMPLETE_OPTION_HEIGHT, this.autocomplete._getScrollTop(), AUTOCOMPLETE_PANEL_HEIGHT);\n            this.autocomplete._setScrollTop(newScrollPosition);\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option != skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = 'mat-autocomplete-panel-above';\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return new (t || MatAutocompleteTrigger)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ViewportRuler)); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMatAutocompleteTrigger.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler }\n];\nMatAutocompleteTrigger.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc4.ViewportRuler }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); }, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[MatOptionModule, OverlayModule, MatCommonModule, CommonModule], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [MatOptionModule, OverlayModule, MatCommonModule, CommonModule]; }, exports: function () { return [CdkScrollableModule, MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatAutocompleteOrigin, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n                exports: [\n                    CdkScrollableModule,\n                    MatAutocomplete,\n                    MatOptionModule,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    MatCommonModule\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"]}