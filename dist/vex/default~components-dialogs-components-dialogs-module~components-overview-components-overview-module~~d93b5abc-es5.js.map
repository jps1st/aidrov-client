{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/dialog.js"],"names":["MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_focusMonitor","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_state","_animationStateChanged","attachDomPortal","portal","_portalOutlet","hasAttached","_setupFocusTrap","_ariaLabelledBy","attachComponentPortal","attachTemplatePortal","_containsFocus","focusContainer","_focusTrap","focusInitialElement","nativeElement","focus","focusInitialElementWhenReady","previousElement","activeElement","element","body","contains","focusVia","destroy","create","Promise","resolve","then","event","toState","_trapFocus","_restoreFocus","emit","markForCheck","ɵfac","MatDialogContainer_Factory","t","ɵcmp","type","selectors","viewQuery","MatDialogContainer_Query","_t","first","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","MatDialogContainer_animation_dialogContainer_start_HostBindingHandler","$event","_onAnimationStart","MatDialogContainer_animation_dialogContainer_done_HostBindingHandler","_onAnimationDone","_id","features","decls","vars","consts","template","MatDialogContainer_Template","directives","styles","encapsulation","animation","ctorParameters","undefined","decorators","args","propDecorators","selector","None","changeDetection","Default","animations","host","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","keyCode","preventDefault","_closeDialogVia","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","setTimeout","totalTime","_startExitAnimation","asObservable","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","ref","interactionType","result","close","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","_scrollStrategy","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","afterClosed","_removeOpenDialog","afterOpened","_closeDialogs","find","dialog","overlayConfig","_getOverlayConfig","dialogConfig","state","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","injector","parent","providers","useValue","containerPortal","componentFactoryResolver","containerRef","attach","instance","$implicit","_createInjector","contentRef","updateSize","get","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","MatDialog_Factory","ɵprov","token","factory","defaultOptions","Object","assign","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","changes","proxiedChange","currentValue","screenX","screenY","MatDialogClose_Factory","ɵdir","MatDialogClose_HostBindings","MatDialogClose_click_HostBindingHandler","_onButtonClick","inputs","_matDialogClose","exportAs","MatDialogTitle","_dialogRef","container","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","MatDialogActions","MatDialogActions_Factory","classList","MatDialogModule","ɵmod","ɵinj","MatDialogModule_Factory","imports","ngJitMode","declarations","exports","entryComponents"],"mappings":"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","file":"default~components-dialogs-components-dialogs-module~components-overview-components-overview-module~~d93b5abc-es5.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by defalt. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        this._focusMonitor = _focusMonitor;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /** State of the dialog animation. */\n        this._state = 'enter';\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._setupFocusTrap();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Moves focus back into the dialog if it was moved out. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            const focusContainer = !this._config.autoFocus || !this._focusTrap.focusInitialElement();\n            if (focusContainer) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /** Moves the focus inside the focus trap. */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const previousElement = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && previousElement &&\n            typeof previousElement.focus === 'function') {\n            const activeElement = this._document.activeElement;\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    previousElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Sets up the focus trand and saves a reference to the\n     * element that was focused before the dialog was opened.\n     */\n    _setupFocusTrap() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n            }\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /** Callback, invoked when an animation on the host starts. */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /** Starts the dialog exit animation. */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig },\n    { type: FocusMonitor }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }, { type: ɵngcc1.FocusMonitor }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'enter'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'done' && event.toState === 'exit'), take(1)).subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = null;\n            this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(event => {\n            event.preventDefault();\n            _closeDialogVia(this, 'keyboard');\n        });\n        _overlayRef.backdropClick().subscribe(() => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                _closeDialogVia(this, 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(event => event.phaseName === 'start'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /** Fetches the position strategy object from the overlay ref. */\n    _getPositionStrategy() {\n        return this._overlayRef.getConfig().positionStrategy;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    // Some mock dialog ref instances in tests do not have the `_containerInstance` property.\n    // For those, we keep the behavior as is and do not deal with the interaction type.\n    if (ref._containerInstance !== undefined) {\n        ref._containerInstance._closeInteractionType = interactionType;\n    }\n    return ref.close(result);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/** @docs-private */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    get _afterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayRef = this._createOverlay(config);\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef }));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        const providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    _removeOpenDialog(dialogRef) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /** Closes all of the dialogs in an array. */\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: MatDialog.ɵfac });\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n}\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) { return ctx._onButtonClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': '_onButtonClick($event)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            });\n        }\n    }\n}\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], null, null); })();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], null, null); })();\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatDialogModule {\n}\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _closeDialogVia, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map"]}