{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js","webpack:///src/app/pages/ui/components/components-overview/components/components-overview-progress-spinner/components-overview-progress-spinner.component.ts","webpack:///src/app/pages/ui/components/components-overview/components/components-overview-progress-spinner/components-overview-progress-spinner.component.html","webpack:///src/app/pages/ui/components/components-overview/components/components-overview-progress-spinner/components-overview-progress-spinner.module.ts"],"names":["MatProgressSpinner__svg_circle_1_Template","rf","ctx","ctx_r0","diameter","_strokeDashOffset","_strokeCircumference","_circleStrokeWidth","_circleRadius","MatProgressSpinner__svg_circle_2_Template","ctx_r1","MatSpinner__svg_circle_1_Template","MatSpinner__svg_circle_2_Template","BASE_SIZE","BASE_STROKE_WIDTH","MatProgressSpinnerBase","_elementRef","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","animationMode","defaults","_diameter","_value","_fallbackAnimation","mode","trackedDiameters","_diameters","has","head","set","Set","EDGE","TRIDENT","_noopAnimations","_forceAnimations","strokeWidth","element","nativeElement","_styleRoot","_attachStyleNode","animationClass","classList","add","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","replace","size","_strokeWidth","value","newValue","Math","max","min","viewBox","PI","ɵfac","MatProgressSpinner_Factory","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","MatProgressSpinner_HostBindings","inputs","color","exportAs","features","decls","vars","consts","template","MatProgressSpinner_Template","_viewBox","directives","styles","encapsulation","changeDetection","WeakMap","ctorParameters","undefined","decorators","args","String","propDecorators","selector","host","OnPush","None","MatSpinner","elementRef","document","MatSpinner_Factory","MatSpinner_HostBindings","MatSpinner_Template","MatProgressSpinnerModule","ɵmod","ɵinj","MatProgressSpinnerModule_Factory","imports","ngJitMode","declarations","exports","ComponentsOverviewProgressSpinnerComponent","progressSpinnerHTML","templateUrl","styleUrls","ComponentsOverviewProgressSpinnerModule"],"mappings":"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","file":"default~components-overview-components-overview-module~components-progress-spinner-components-progre~3cba307d-es5.js","sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0.diameter)(\"stroke-dashoffset\", ctx_r0._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r0._strokeCircumference, \"px\")(\"stroke-width\", ctx_r0._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._circleRadius);\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._strokeDashOffset, \"px\")(\"stroke-dasharray\", ctx_r1._strokeCircumference, \"px\")(\"stroke-width\", ctx_r1._circleStrokeWidth, \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._circleRadius);\n} }\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nclass MatProgressSpinnerBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    get _circleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    get _viewBox() {\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    get _strokeCircumference() {\n        return 2 * Math.PI * this._circleRadius;\n    }\n    /** The dash offset of the svg circle. */\n    get _strokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._strokeCircumference * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._strokeCircumference * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    get _circleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this.diameter}`);\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._viewBox);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_viewBox\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_circleRadius\\\"\\n    [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\"\\n    [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\"\\n    [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); }, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n//# sourceMappingURL=progress-spinner.js.map","import {Component, OnInit} from '@angular/core';\r\n\r\n\r\n@Component({\r\n    selector: 'vex-components-overview-progress-spinner',\r\n    templateUrl: './components-overview-progress-spinner.component.html',\r\n    styleUrls: ['./components-overview-progress-spinner.component.scss']\r\n})\r\nexport class ComponentsOverviewProgressSpinnerComponent implements OnInit {\r\n\r\n    progressSpinnerHTML = `<mat-progress-spinner mode=\"determinate\" [value]=\"40\"></mat-progress-spinner>\r\n<mat-progress-spinner mode=\"indeterminate\" color=\"accent\"></mat-progress-spinner>`;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","<div class=\"card\" fxLayout=\"column\" fxLayout.gt-sm=\"row\">\r\n    <div class=\"p-6\">\r\n        <h2 class=\"title mt-0 mb-4\">Preview</h2>\r\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxLayoutGap=\"24px\">\r\n            <mat-progress-spinner [value]=\"80\" mode=\"determinate\"></mat-progress-spinner>\r\n            <mat-progress-spinner color=\"accent\" mode=\"indeterminate\"></mat-progress-spinner>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"border-l\" fxFlex>\r\n        <div class=\"p-6\">\r\n            <h2 class=\"title mt-0 mb-4\">Progress Spinner</h2>\r\n            <h4 class=\"body-2 text-secondary m-0\">&lt;mat-progress-spinner&gt;</h4>\r\n        </div>\r\n\r\n        <mat-tab-group class=\"vex-tabs\">\r\n            <mat-tab label=\"DESCRIPTION\">\r\n                <p class=\"p-6\">\r\n                    A single visual indicator should be used to represent each type of operation. For example, a refresh\r\n                    operation\r\n                    should display either a refresh bar or an activity circle, but not both.\r\n                    <br>\r\n                    <br>Determinate indicators display how long an operation will take.\r\n                    <br>Indeterminate indicators visualize an unspecified wait time.\r\n                </p>\r\n            </mat-tab>\r\n            <mat-tab label=\"SOURCE CODE\">\r\n                <pre><code [vexHighlight]=\"progressSpinnerHTML\"></code></pre>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>\r\n\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComponentsOverviewProgressSpinnerComponent} from './components-overview-progress-spinner.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {HighlightModule} from '../../../../../../../@vex/components/highlight/highlight.module';\n\n\n@NgModule({\n    declarations: [ComponentsOverviewProgressSpinnerComponent],\n    imports: [\n        CommonModule,\n        MatTabsModule,\n        FlexLayoutModule,\n        MatProgressSpinnerModule,\n        HighlightModule\n    ],\n    exports: [\n        ComponentsOverviewProgressSpinnerComponent\n    ]\n})\nexport class ComponentsOverviewProgressSpinnerModule {\n}\n"]}